import React, { useState, useRef, useEffect, useCallback } from 'react';
import React, { useState, useRef, useEffect, useCallback } from 'react';
import './MessageArea.css';
import llmService from '../services/llmService';
import topicService from '../services/topicService';
import RelatedMessages from './RelatedMessages';

const MessageArea = ({ selectedTopic }) => {
  const messagesEndRef = useRef(null);
  const [message, setMessage] = useState('');
  const [file, setFile] = useState(null);
  const [topicMessages, setTopicMessages] = useState([]);
  const [relatedMessages, setRelatedMessages] = useState([]);
  
  // State to track which messages are expanded
  const [expandedMessages, setExpandedMessages] = useState({});

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      // First attempt - immediate scroll
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      
      // Second attempt - with a small delay to ensure DOM has updated
      setTimeout(() => {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }, 100);
      
      // Third attempt - with a longer delay for slower rendering
      setTimeout(() => {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }, 300);
    }
  };
  
  // Load messages when a topic is selected
  const loadMessages = useCallback(async () => {
    if (!selectedTopic || !selectedTopic.id) {
      setTopicMessages([]);
      setRelatedMessages([]);
      return;
    }

    try {
      // selectedTopic now contains both id and name
      console.log('Loading messages for topic ID:', selectedTopic.id, 'Name:', selectedTopic.name);
      const messages = await topicService.getMessagesByTopicId(selectedTopic.id);
      
      // Log raw messages from API to check their structure
      console.log('Raw messages from API:', messages);
      
      // Transform the API response to match the component's message format
      const formattedMessages = messages.map(msg => ({
        id: msg.id,
        content: msg.content,
        timestamp: msg.createdAt,
        author: msg.isUser ? 'You' : 'Assistant',
        // Preserve the turn_index field from the backend
        turn_index: msg.turn_index
      }));

      console.log('Loaded messages:', formattedMessages);
      setTopicMessages(formattedMessages);
      
      // Explicitly scroll to bottom after messages are loaded
      // Use a small delay to ensure state update has completed
      setTimeout(() => {
        scrollToBottom();
      }, 200);
    } catch (error) {
      console.error('Failed to load messages:', error);
      // Optionally show an error message to the user
    }
  }, [selectedTopic?.id, scrollToBottom]);

  // Load messages when the selected topic changes
  useEffect(() => {
    console.log('Selected topic changed, loading messages for:', selectedTopic?.id, selectedTopic?.name);
    loadMessages();
  }, [loadMessages]);
    if (messagesEndRef.current) {
      // First attempt - immediate scroll
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      
      // Second attempt - with a small delay to ensure DOM has updated
      setTimeout(() => {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }, 100);
      
      // Third attempt - with a longer delay for slower rendering
      setTimeout(() => {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }, 300);
    }
  };
  
  // Function to toggle message expansion
  const toggleMessageExpansion = (messageId) => {
    setExpandedMessages(prev => ({
      ...prev,
      [messageId]: !prev[messageId]
    }));
  };

  // Scroll when messages change
  useEffect(() => {
    scrollToBottom();
  }, [topicMessages]);
  
  // Scroll when component mounts or selected topic changes
  useEffect(() => {
    scrollToBottom();
  }, [selectedTopic]);
  
  // Scroll when component first mounts, with no dependencies
  useEffect(() => {
    // Use a slightly longer delay for the initial scroll
    setTimeout(() => {
      scrollToBottom();
    }, 500);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;
    
    console.log('Selected topic in handleSubmit:', selectedTopic);
    
    if (!selectedTopic || !selectedTopic.id) {
      console.error('No valid topic selected');
      alert('Please select a topic before sending a message');
      return;
    }
    
    // Get the numeric ID from the selectedTopic object
    const numericId = selectedTopic.id;
    
    console.log('Using numeric ID:', numericId, 'Name:', selectedTopic.name);

    try {
      // Add user message to UI immediately for better UX
      const userMessage = {
        id: `temp-${Date.now()}`,
        content: message,
        timestamp: new Date().toISOString(),
        author: 'You'
      };
      
      // Clear input field immediately
      setMessage('');
      
      // Add user message to the UI
      setTopicMessages(prev => [...prev, userMessage]);
      
      // Scroll to bottom after adding user message
      scrollToBottom();
      
      // Submit to LLM with the selected topic path
      console.log('Calling submitPrompt with:', {
        message,
        topicPathId: numericId,
        avatarId: 1
      });
      
      // Show loading state
      const loadingMessage = {
        id: `loading-${Date.now()}`,
        content: 'Thinking...',
        timestamp: new Date().toISOString(),
        author: 'Assistant',
        isLoading: true
      };
      
      setTopicMessages(prev => [...prev, loadingMessage]);
      
      try {
        // Submit the prompt and get the response
        const response = await llmService.submitPrompt(message, {
          topicPathId: numericId, // Use numeric ID for database operations
          avatarId: 1,
          // We don't have a message ID yet since we're creating a new message
          // The backend will handle excluding the current message once it's created
        });
        
        // Process relevant messages if they exist in the response
        if (response.relevantMessages && response.relevantMessages.length > 0) {
          console.log(`Processing ${response.relevantMessages.length} relevant messages from response`);
          
          // Format the relevant messages for display
          const formattedRelevantMessages = response.relevantMessages.map(msg => ({
            id: msg.id,
            content: msg.content,
            timestamp: msg.timestamp || new Date().toISOString(),
            author: 'Assistant',
            topicId: msg.topicId, // Use the numeric ID for topic selection
            topicPath: msg.topicPath || 'Unknown', // Use human-readable path for display
            score: msg.score // Keep the relevance score
          }));
          
          // Update the related messages state
          setRelatedMessages(formattedRelevantMessages);
        } else {
          console.log('No relevant messages found in response');
          setRelatedMessages([]);
        }
        
        // Refresh messages to get the latest from the server
        await loadMessages();
        
        // Update the messages state with the response
        const responseId = response.id || `response-${Date.now()}`;
        
        // Automatically expand the latest response
        setExpandedMessages(prev => ({
          ...prev,
          [responseId]: true // Set the new message to expanded state
        }));
        
        setTopicMessages(prev => {
          // Find and remove the loading message
          const updatedMessages = prev.filter(msg => !msg.isLoading);
          
          // Add the assistant's response
          return [...updatedMessages, {
            id: responseId,
            content: response.response,
            timestamp: new Date().toISOString(),
            author: 'Assistant'
          }];
        });
        
        // Explicitly scroll to bottom after adding the assistant's response
        scrollToBottom();
        
      } catch (error) {
        console.error('Error in LLM submission:', error);
        // Remove loading message and show error
        setTopicMessages(prev => [
          ...prev.filter(m => m.id !== loadingMessage.id),
          {
            id: `error-${Date.now()}`,
            content: `Error: ${error.message || 'Failed to get response'}`,
            timestamp: new Date().toISOString(),
            author: 'System',
            isError: true
          }
        ]);
      }
    } catch (error) {
      console.error('Error in handleSubmit:', error);
      // Show error message in the UI
      setTopicMessages(prev => [
        ...prev,
        {
          id: `error-${Date.now()}`,
          content: `Error: ${error.message || 'Failed to send message'}`,
          timestamp: new Date().toISOString(),
          author: 'System',
          isError: true
        }
      ]);
    }
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      uploadFile(selectedFile);
    }
  };
  
  const uploadFile = async (file) => {
    if (!file || !selectedTopic || !selectedTopic.id) {
      console.error('Cannot upload file: No file selected or no topic selected');
      return;
    }
    
    try {
      // Create a FormData object to send the file
      const formData = new FormData();
      formData.append('file', file);
      formData.append('topicPathId', selectedTopic.id); // Use the numeric ID from the selectedTopic object
      formData.append('description', 'Uploaded from chat');
      
      // Calculate the next turn index based on the number of messages
      // Since they're already ordered, we can use the count as the next index
      const nextTurnIndex = topicMessages.length;
      
      console.log(`Using turn index ${nextTurnIndex} for file upload (based on message count)`);
      console.log('Current message count:', topicMessages.length);
      
      formData.append('turnIndex', nextTurnIndex.toString());
      
      // Add a temporary message showing the upload in progress
      const uploadingMessage = {
        id: `upload-${Date.now()}`,
        content: `Uploading file: ${file.name}...`,
        timestamp: new Date().toISOString(),
        author: 'System',
        isLoading: true
      };
      
      setTopicMessages(prev => [...prev, uploadingMessage]);
      
      // Upload the file
      const response = await fetch('/api/file-uploads', {
        method: 'POST',
        body: formData,
        // No need to set Content-Type header - browser will set it with correct boundary
      });
      
      if (!response.ok) {
        throw new Error(`Upload failed: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('File uploaded successfully:', result);
      
      // Replace the uploading message with a success message
      setTopicMessages(prev => [
        ...prev.filter(m => m.id !== uploadingMessage.id),
        {
          id: `upload-success-${Date.now()}`,
          content: `File uploaded: ${file.name}`,
          timestamp: new Date().toISOString(),
          author: 'System'
        }
      ]);
      
      // Refresh messages to show the new file upload message from the server
      await loadMessages();
      
      // Clear the file state
      setFile(null);
      
    } catch (error) {
      console.error('Error uploading file:', error);
      
      // Show error message in the UI
      // Database IDs are numbers (bigint), only temp UI messages use string IDs with prefixes
      const tempUploadMsgId = `upload-error-${Date.now()}`;
      
      setTopicMessages(prev => [
        // Keep all messages - the temporary uploading message will be removed during the next loadMessages() call
        ...prev,
        {
          id: tempUploadMsgId, // Use a string ID for UI-generated messages
          content: `Error uploading file: ${error.message}`,
          timestamp: new Date().toISOString(),
          author: 'System',
          isError: true
        }
      ]);
    }
  };

  const renderTopicBreadcrumb = () => {
    // Since we don't have path information anymore, we can't display breadcrumbs
    return null;
  };


  const renderMessage = (message) => {
    const messageClasses = [
      'message-item',
      message.isLoading ? 'message-loading' : '',
      message.isError ? 'message-error' : ''
    ].filter(Boolean).join(' ');

    return (
      <div key={message.id} className={messageClasses}>
        <div className="message-header">
          <span className="message-author">{message.author}</span>
          <span className="message-timestamp">
            {new Date(message.timestamp).toLocaleString()}
          </span>
        </div>
        <div className="message-content">
          {message.isLoading ? (
            <div className="loading-dots">
              <span>.</span>
              <span>.</span>
              <span>.</span>
            </div>
          ) : (
            <>
              {message.content && message.content.length > 400 ? (
                expandedMessages[message.id] ? (
                  <>
                    {message.content}
                    <span 
                      style={{ color: '#1976d2', cursor: 'pointer', marginLeft: '5px', fontWeight: 'bold' }}
                      onClick={() => toggleMessageExpansion(message.id)}
                    >
                      Show less
                    </span>
                  </>
                ) : (
                  <>
                    {message.content.substring(0, 400)}
                    <span 
                      style={{ color: '#1976d2', cursor: 'pointer', marginLeft: '5px', fontWeight: 'bold' }}
                      onClick={() => toggleMessageExpansion(message.id)}
                    >
                      ... Show more
                    </span>
                  </>
                )
              ) : message.content}
            </>
          )}
        </div>
        {message.topicPath && (
          <div className="message-footer">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
              <span className="message-topic-path">{message.topicPath}</span>
              {message.score && (
                <span className="message-relevance-score">
                  {Math.round(message.score * 100)}% match
                </span>
              )}
            </div>
            {message.topicId && (
              <div 
                style={{
                  fontSize: '0.75rem',
                  backgroundColor: '#e3f2fd',
                  color: '#1976d2',
                  padding: '2px 8px',
                  borderRadius: '10px',
                  cursor: 'pointer',
                  fontWeight: '500',
                  marginTop: '4px',
                  display: 'inline-block'
                }}
                onClick={() => {
                  // Get the topic name from the path
                  const topicName = message.topicPath.split('.').pop() || 'Topic';
                  // Create a new selectedTopic object with both id and name
                  const newSelectedTopic = {
                    id: message.topicId,
                    name: topicName
                  };
                  // Update the selected topic
                  if (typeof window.setSelectedTopic === 'function') {
                    window.setSelectedTopic(newSelectedTopic);
                  } else {
                    console.log('Selecting topic:', newSelectedTopic);
                    // Since we can't directly access the parent component's state,
                    // we'll need to implement a proper state management solution
                    // For now, we'll just log the action
                  }
                }}
                title="Open this topic"
              >
                {message.topicPath.split('.').pop() || 'Topic'}
              </div>
            )}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="message-area">
      <div className="topic-header">
        {!selectedTopic || !selectedTopic.id ? (
          <div className="no-topic-selected">
            <i className="fas fa-info-circle"></i> Please select a topic from the sidebar
          </div>
        ) : null}
      </div>

      {/* Messages container */}
      <div className="messages-container">
        {/* Topic messages */}
        <div className="messages-column">
          <div className="messages-header">
            {selectedTopic && selectedTopic.id ? selectedTopic.name : 'Messages in this topic'}
          </div>
          <div className="messages-list">
            <div>
              {topicMessages.map(renderMessage)}
              <div ref={messagesEndRef} />
            </div>
          </div>
        </div>

        {/* Related messages */}
        <div className="messages-column">
          <RelatedMessages 
            messages={relatedMessages} 
            isLoading={false} 
            onTopicSelect={(topicId, messageId) => {
              // Handle topic selection from related messages
              console.log('Selected topic from related messages:', topicId, 'messageId:', messageId);
              
              // Find the topic name from the related messages
              const selectedMessage = relatedMessages.find(msg => msg.topicId === topicId);
              const topicName = selectedMessage?.topicPath?.split('.')?.pop() || 'Unknown';
              
              // Update the selected topic via the window object
              if (typeof window.setSelectedTopic === 'function') {
                window.setSelectedTopic({
                  id: topicId,
                  name: topicName
                });
              }
            }} 
            selectedMessageId={null}
          />
        </div>
      </div>

      {/* Message input */}
      <div className="message-input-container">
        <form onSubmit={handleSubmit} className="message-input-form">
          <textarea
            className="message-input"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Type your message..."
          />
          <div className="message-actions">
            <button type="submit" className="send-button">
              Send
            </button>
            <label className="upload-button">
              <input
                type="file"
                onChange={handleFileChange}
                style={{ display: 'none' }}
              />
              📎
            </label>
          </div>
        </form>
        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default MessageArea;
